(function() {var type_impls = {
"kff":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsMut%3CBitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsMut%3CBitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut\" class=\"method trait-impl\"><a href=\"#method.as_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsMut.html#tymethod.as_mut\" class=\"fn\">as_mut</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a mutable reference of the (usually inferred) input type.</div></details></div></details>","AsMut<BitSlice<T, O>>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CBitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-AsRef%3CBitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<BitSlice<T, O>>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Binary-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    O: BitOrder,\n    T: BitStore,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Binary.html#tymethod.fmt\">Read more</a></div></details></div></details>","Binary","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitAnd%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;Rhs&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitBox&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: Rhs) -&gt; &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitAnd.html\" title=\"trait core::ops::bit::BitAnd\">BitAnd</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::bit::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<Rhs>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitAndAssign%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitAndAssign.html\" title=\"trait core::ops::bit::BitAndAssign\">BitAndAssign</a>&lt;Rhs&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign<Rhs>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_bitslice</a>(slice: &amp;BitSlice&lt;T, O&gt;) -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Copies a bit-slice region into a new bit-box allocation.</p>\n<p>The referent memory is <code>memcpy</code>d into the heap, exactly preserving the\noriginal bit-slice’s memory layout and contents. This allows the\nfunction to run as fast as possible, but misaligned source bit-slices\nmay result in decreased performance or unexpected layout behavior during\nuse. You can use <a href=\"Self::force_align\"><code>.force_align()</code></a> to ensure that the referent\nbit-slice is aligned in memory.</p>\n<h6 id=\"notes\"><a class=\"doc-anchor\" href=\"#notes\">§</a>Notes</h6>\n<p>Bits in the allocation of the source bit-slice, but outside its own\ndescription of that memory, have an <strong>unspecified</strong>, but initialized,\nvalue. You may not rely on their contents in any way, and you <em>should</em>\ncall <a href=\"Self::force_align\"><code>.force_align()</code></a> and/or <a href=\"Self::fill_uninitialized\"><code>.fill_uninitialized()</code></a> if you are\ngoing to inspect the underlying memory of the new allocation.</p>\n<h6 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>data = <span class=\"number\">0b0101_1011u8</span>;\n<span class=\"kw\">let </span>bits = data.view_bits::&lt;Msb0&gt;();\n<span class=\"kw\">let </span>bb = BitBox::from_bitslice(<span class=\"kw-2\">&amp;</span>bits[<span class=\"number\">2 </span>..]);\n<span class=\"macro\">assert_eq!</span>(bb, bits[<span class=\"number\">2 </span>..]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_boxed_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_boxed_slice</a>(boxed: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[T]</a>&gt;) -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a <code>Box&lt;[T]&gt;</code> into a <code>BitBox&lt;T, O&gt;</code>, in place.</p>\n<p>This does not affect the referent buffer, and only transforms the\nhandle.</p>\n<h6 id=\"panics\"><a class=\"doc-anchor\" href=\"#panics\">§</a>Panics</h6>\n<p>This panics if the provided <code>boxed</code> slice is too long to view as a\nbit-slice region.</p>\n<h6 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>boxed: Box&lt;[u8]&gt; = Box::new([<span class=\"number\">0</span>; <span class=\"number\">40</span>]);\n<span class=\"kw\">let </span>addr = boxed.as_ptr();\n<span class=\"kw\">let </span>bb = BitBox::&lt;u8&gt;::from_boxed_slice(boxed);\n<span class=\"macro\">assert_eq!</span>(bb, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>; <span class=\"number\">320</span>]);\n<span class=\"macro\">assert_eq!</span>(addr, bb.as_raw_slice().as_ptr());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from_boxed_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">try_from_boxed_slice</a>(boxed: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[T]</a>&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitBox&lt;T, O&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[T]</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Attempts to convert an ordinary boxed slice into a boxed bit-slice.</p>\n<p>This does not perform a copy or reällocation; it only attempts to\ntransform the handle. Because <code>Box&lt;[T]&gt;</code> can be longer than <code>BitBox</code>es,\nit may fail, and will return the original handle if it does.</p>\n<p>It is unlikely that you have a single <code>Box&lt;[_]&gt;</code> that is too large to\nconvert into a bit-box. You can find the length restrictions as the\nbit-slice associated constants <a href=\"crate::slice::BitSlice::MAX_BITS\"><code>MAX_BITS</code></a> and <a href=\"crate::slice::BitSlice::MAX_ELTS\"><code>MAX_ELTS</code></a>.</p>\n<h6 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>boxed: Box&lt;[u8]&gt; = Box::new([<span class=\"number\">0u8</span>; <span class=\"number\">40</span>]);\n<span class=\"kw\">let </span>addr = boxed.as_ptr();\n<span class=\"kw\">let </span>bb = BitBox::&lt;u8&gt;::try_from_boxed_slice(boxed).unwrap();\n<span class=\"macro\">assert_eq!</span>(bb, <span class=\"macro\">bits!</span>[<span class=\"number\">0</span>; <span class=\"number\">320</span>]);\n<span class=\"macro\">assert_eq!</span>(addr, bb.as_raw_slice().as_ptr());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_boxed_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_boxed_slice</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the bit-box back into an ordinary boxed element slice.</p>\n<p>This does not touch the allocator or the buffer contents; it is purely a\nhandle transform.</p>\n<h6 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bb = <span class=\"macro\">bitbox!</span>[<span class=\"number\">0</span>; <span class=\"number\">5</span>];\n<span class=\"kw\">let </span>addr = bb.as_raw_slice().as_ptr();\n<span class=\"kw\">let </span>boxed = bb.into_boxed_slice();\n<span class=\"macro\">assert_eq!</span>(boxed[..], [<span class=\"number\">0</span>][..]);\n<span class=\"macro\">assert_eq!</span>(addr, boxed.as_ptr());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_bitvec\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_bitvec</a>(self) -&gt; BitVec&lt;T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Converts the bit-box into a bit-vector.</p>\n<p>This uses the Rust allocator API, and does not guarantee whether or not\na reällocation occurs internally.</p>\n<p>The resulting bit-vector can be converted back into a bit-box via\n<a href=\"crate::vec::BitVec::into_boxed_bitslice\"><code>BitBox::into_boxed_bitslice</code></a>.</p>\n<h6 id=\"original\"><a class=\"doc-anchor\" href=\"#original\">§</a>Original</h6>\n<p><a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.into_vec\"><code>slice::into_vec</code></a></p>\n<h6 id=\"api-differences\"><a class=\"doc-anchor\" href=\"#api-differences\">§</a>API Differences</h6>\n<p>The original function is implemented in an <code>impl&lt;T&gt; [T]</code> block, despite\ntaking a <code>Box&lt;[T]&gt;</code> receiver. Since <code>BitBox</code> cannot be used as an\nexplicit receiver outside its own <code>impl</code> blocks, the method is relocated\nhere.</p>\n<h6 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bb = <span class=\"macro\">bitbox!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>];\n<span class=\"kw\">let </span>bv = bb.into_bitvec();\n\n<span class=\"macro\">assert_eq!</span>(bv, <span class=\"macro\">bitvec!</span>[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_bitslice</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Explicitly views the bit-box as a bit-slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_mut_bitslice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_mut_bitslice</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Explicitly views the bit-box as a mutable bit-slice.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_raw_slice</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Views the bit-box as a slice of its underlying memory elements.</p>\n<p>Because bit-boxes uniquely own their buffer, they can safely view the\nunderlying buffer without dealing with contending neighbors.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_raw_mut_slice\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">as_raw_mut_slice</a>(&amp;mut self) -&gt; &amp;mut <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[T]</a></h4></section></summary><div class=\"docblock\"><p>Views the bit-box as a mutable slice of its underlying memory elements.</p>\n<p>Because bit-boxes uniquely own their buffer, they can safely view the\nunderlying buffer without dealing with contending neighbors.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fill_uninitialized\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">fill_uninitialized</a>(&amp;mut self, value: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Sets the unused bits outside the <code>BitBox</code> buffer to a fixed value.</p>\n<p>This method modifies all bits that the allocated buffer owns but which\nare outside the <code>self.as_bitslice()</code> view. <code>bitvec</code> guarantees that all\nowned bits are initialized to <em>some</em> value, but does not guarantee\n<em>which</em> value. This method can be used to make all such unused bits have\na known value after the call, so that viewing the underlying memory\ndirectly has consistent results.</p>\n<p>Note that the crate implementation guarantees that all bits owned by its\nhandles are stably initialized according to the language and compiler\nrules! <code>bitvec</code> will never cause UB by using uninitialized memory.</p>\n<h6 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bits = <span class=\"number\">0b1011_0101u8</span>.view_bits::&lt;Msb0&gt;();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bb = BitBox::from_bitslice(<span class=\"kw-2\">&amp;</span>bits[<span class=\"number\">2 </span>.. <span class=\"number\">6</span>]);\n<span class=\"macro\">assert_eq!</span>(bb.count_ones(), <span class=\"number\">3</span>);\n<span class=\"comment\">// Remember, the two bits on each edge are unspecified, and cannot be\n// observed! They must be masked away for the test to be meaningful.\n</span><span class=\"macro\">assert_eq!</span>(bb.as_raw_slice()[<span class=\"number\">0</span>] &amp; <span class=\"number\">0x3C</span>, <span class=\"number\">0b00_1101_00u8</span>);\n\nbb.fill_uninitialized(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(bb.as_raw_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0b00_1101_00u8</span>]);\n\nbb.fill_uninitialized(<span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(bb.as_raw_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0b11_1101_11u8</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.force_align\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">force_align</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Ensures that the allocated buffer has no dead bits between the start of\nthe buffer and the start of the live bit-slice.</p>\n<p>This is useful for ensuring a consistent memory layout in bit-boxes\ncreated by cloning an arbitrary bit-slice into the heap. As bit-slices\ncan begin and end anywhere in memory, the <a href=\"Self::from_bitslice\"><code>::from_bitslice()</code></a> function\ndoes not attempt to normalize them and only does a fast element-wise\ncopy when creating the bit-box.</p>\n<p>The value of dead bits that are in the allocation but not in the live\nregion are <em>initialized</em>, but do not have a <em>specified</em> value. After\ncalling this method, you should use <a href=\"Self::fill_uninitialized\"><code>.fill_uninitialized()</code></a> to set the\nexcess bits in the buffer to a fixed value.</p>\n<h6 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bits = <span class=\"kw-2\">&amp;</span><span class=\"number\">0b10_1101_01u8</span>.view_bits::&lt;Msb0&gt;()[<span class=\"number\">2 </span>.. <span class=\"number\">6</span>];\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>bb = BitBox::from_bitslice(bits);\n<span class=\"comment\">// Remember, the two bits on each edge are unspecified, and cannot be\n// observed! They must be masked away for the test to be meaningful.\n</span><span class=\"macro\">assert_eq!</span>(bb.as_raw_slice()[<span class=\"number\">0</span>] &amp; <span class=\"number\">0x3C</span>, <span class=\"number\">0b00_1101_00u8</span>);\n\nbb.force_align();\nbb.fill_uninitialized(<span class=\"bool-val\">false</span>);\n<span class=\"macro\">assert_eq!</span>(bb.as_raw_slice(), <span class=\"kw-2\">&amp;</span>[<span class=\"number\">0b1101_0000u8</span>]);</code></pre></div>\n</div></details></div></details>",0,"kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw\" class=\"method\"><h4 class=\"code-header\">pub unsafe fn <a class=\"fn\">from_raw</a>(raw: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.pointer.html\">*mut </a>BitSlice&lt;T, O&gt;) -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Constructs a bit-box from a raw bit-slice pointer.</p>\n<p>This converts a <code>*mut BitSlice</code> pointer that had previously been\nproduced by either <a href=\"Self::into_raw\"><code>::into_raw()</code></a> or <a href=\"Self::leak\"><code>::leak()</code></a> and restores the\nbit-box containing it.</p>\n<h6 id=\"original\"><a class=\"doc-anchor\" href=\"#original\">§</a>Original</h6>\n<p><a href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html#method.from_raw\" title=\"associated function alloc::boxed::Box::from_raw\"><code>Box::from_raw</code></a></p>\n<h6 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h6>\n<p>You must only call this function on pointers produced by leaking a prior\n<code>BitBox</code>; you may not modify the value of a pointer returned by\n<a href=\"Self::into_raw\"><code>::into_raw()</code></a>, nor may you conjure pointer values of your own. Doing\nso will corrupt the allocator state.</p>\n<p>You must only call this function on any given leaked pointer at most\nonce. Not calling it at all will merely render the allocated memory\nunreachable for the duration of the program runtime, a normal (and safe)\nmemory leak. Calling it once restores ordinary functionality, and\nensures ordinary destruction at or before program termination. However,\ncalling it more than once on the same pointer will introduce data races,\nuse-after-free, and/or double-free errors.</p>\n<h6 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bb = <span class=\"macro\">bitbox!</span>[<span class=\"number\">0</span>; <span class=\"number\">80</span>];\n<span class=\"kw\">let </span>ptr: <span class=\"kw-2\">*mut </span>BitSlice = BitBox::into_raw(bb);\n<span class=\"kw\">let </span>bb = <span class=\"kw\">unsafe </span>{ BitBox::from_raw(ptr) };\n<span class=\"comment\">// unsafe { BitBox::from_raw(ptr) }; // UAF crash!</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_raw\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">into_raw</a>(this: BitBox&lt;T, O&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.pointer.html\">*mut </a>BitSlice&lt;T, O&gt;</h4></section></summary><div class=\"docblock\"><p>Consumes the bit-box, returning a raw bit-slice pointer.</p>\n<p>Bit-slice pointers are always correctly encoded and non-null. The\nreferent region is dereferenceäble *as a <code>BitSlice</code> for the remainder of\nthe program, or until it is first passed to <a href=\"Self::from_raw\"><code>::from_raw()</code></a>, whichever\ncomes first. Once the pointer is first passed to <code>::from_raw()</code>, all\ncopies of that pointer become invalid to dereference.</p>\n<h6 id=\"original-1\"><a class=\"doc-anchor\" href=\"#original-1\">§</a>Original</h6>\n<p><a href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html#method.into_raw\" title=\"associated function alloc::boxed::Box::into_raw\"><code>Box::into_raw</code></a></p>\n<h6 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bb = <span class=\"macro\">bitbox!</span>[<span class=\"number\">0</span>; <span class=\"number\">80</span>];\n<span class=\"kw\">let </span>ptr = BitBox::into_raw(bb);\n<span class=\"kw\">let </span>bb = <span class=\"kw\">unsafe </span>{ BitBox::from_raw(ptr) };</code></pre></div>\n<p>You <strong>may not</strong> deällocate pointers produced by this function through\nany other means.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leak\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">leak</a>&lt;'a&gt;(this: BitBox&lt;T, O&gt;) -&gt; &amp;'a mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;&#39;a mut BitSlice&lt;T, O&gt;\">ⓘ</a><div class=\"where\">where\n    T: 'a,</div></h4></section></summary><div class=\"docblock\"><p>Deliberately leaks the allocated memory, returning an\n<code>&amp;'static mut BitSlice</code> reference.</p>\n<p>This differs from <a href=\"Self::into_raw\"><code>::into_raw()</code></a> in that the reference is safe to use\nand can be tracked by the Rust borrow-checking system. Like the\nbit-slice pointer produced by <code>::into_raw()</code>, this reference can be\nun-leaked by passing it into <a href=\"Self::from_raw\"><code>::from_raw()</code></a> to reclaim the memory.</p>\n<h6 id=\"original-2\"><a class=\"doc-anchor\" href=\"#original-2\">§</a>Original</h6>\n<p><a href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html#method.leak\" title=\"associated function alloc::boxed::Box::leak\"><code>Box::leak</code></a></p>\n<h6 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>bitvec::prelude::<span class=\"kw-2\">*</span>;\n\n<span class=\"kw\">let </span>bb = <span class=\"macro\">bitbox!</span>[<span class=\"number\">0</span>; <span class=\"number\">80</span>];\n<span class=\"kw\">let </span>static_ref: <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'static </span><span class=\"kw-2\">mut </span>BitSlice = BitBox::leak(bb);\n\nstatic_ref.set(<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert!</span>(static_ref[<span class=\"number\">0</span>]);\n<span class=\"kw\">let _ </span>= <span class=\"kw\">unsafe </span>{\n  BitBox::from_raw(static_ref)\n};</code></pre></div>\n</div></details></div></details>",0,"kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitField-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitField-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; BitField for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: BitField,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_le\" class=\"method trait-impl\"><a href=\"#method.load_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_le</a>&lt;I&gt;(&amp;self) -&gt; I<div class=\"where\">where\n    I: Integral,</div></h4></section></summary><div class='docblock'>Little-Endian Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load_be\" class=\"method trait-impl\"><a href=\"#method.load_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load_be</a>&lt;I&gt;(&amp;self) -&gt; I<div class=\"where\">where\n    I: Integral,</div></h4></section></summary><div class='docblock'>Big-Endian Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store_le\" class=\"method trait-impl\"><a href=\"#method.store_le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store_le</a>&lt;I&gt;(&amp;mut self, value: I)<div class=\"where\">where\n    I: Integral,</div></h4></section></summary><div class='docblock'>Little-Endian Integer Storing <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store_be\" class=\"method trait-impl\"><a href=\"#method.store_be\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store_be</a>&lt;I&gt;(&amp;mut self, value: I)<div class=\"where\">where\n    I: Integral,</div></h4></section></summary><div class='docblock'>Big-Endian Integer Storing <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.load\" class=\"method trait-impl\"><a href=\"#method.load\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">load</a>&lt;I&gt;(&amp;self) -&gt; I<div class=\"where\">where\n    I: Integral,</div></h4></section></summary><div class='docblock'>Integer Loading <a>Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.store\" class=\"method trait-impl\"><a href=\"#method.store\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a class=\"fn\">store</a>&lt;I&gt;(&amp;mut self, value: I)<div class=\"where\">where\n    I: Integral,</div></h4></section></summary><div class='docblock'>Integer Storing <a>Read more</a></div></details></div></details>","BitField","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitOr%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitBox&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: Rhs) -&gt; &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitOr.html\" title=\"trait core::ops::bit::BitOr\">BitOr</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::bit::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<Rhs>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitOrAssign%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitOrAssign.html\" title=\"trait core::ops::bit::BitOrAssign\">BitOrAssign</a>&lt;Rhs&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<Rhs>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitXor%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;Rhs&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitBox&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, rhs: Rhs) -&gt; &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitXor.html\" title=\"trait core::ops::bit::BitXor\">BitXor</a>&lt;Rhs&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::bit::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<Rhs>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BitXorAssign%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitXorAssign.html\" title=\"trait core::ops::bit::BitXorAssign\">BitXorAssign</a>&lt;Rhs&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, rhs: Rhs)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign<Rhs>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Borrow%3CBitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Borrow%3CBitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow\" class=\"method trait-impl\"><a href=\"#method.borrow\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/borrow/trait.Borrow.html#tymethod.borrow\" class=\"fn\">borrow</a>(&amp;self) -&gt; &amp;BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Immutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.80.1/core/borrow/trait.Borrow.html#tymethod.borrow\">Read more</a></div></details></div></details>","Borrow<BitSlice<T, O>>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BorrowMut%3CBitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-BorrowMut%3CBitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/borrow/trait.BorrowMut.html\" title=\"trait core::borrow::BorrowMut\">BorrowMut</a>&lt;BitSlice&lt;T, O&gt;&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrow_mut\" class=\"method trait-impl\"><a href=\"#method.borrow_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\" class=\"fn\">borrow_mut</a>(&amp;mut self) -&gt; &amp;mut BitSlice&lt;T, O&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;mut BitSlice&lt;T, O&gt;\">ⓘ</a></h4></section></summary><div class='docblock'>Mutably borrows from an owned value. <a href=\"https://doc.rust-lang.org/1.80.1/core/borrow/trait.BorrowMut.html#tymethod.borrow_mut\">Read more</a></div></details></div></details>","BorrowMut<BitSlice<T, O>>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Clone-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.80.1/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Debug-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Default-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.80.1/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Deref-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = BitSlice&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DerefMut-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-DerefMut-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/deref/trait.DerefMut.html\" title=\"trait core::ops::deref::DerefMut\">DerefMut</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref_mut\" class=\"method trait-impl\"><a href=\"#method.deref_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/deref/trait.DerefMut.html#tymethod.deref_mut\" class=\"fn\">deref_mut</a>(&amp;mut self) -&gt; &amp;mut &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Mutably dereferences the value.</div></details></div></details>","DerefMut","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Display-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    O: BitOrder,\n    T: BitStore,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Drop-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Drop-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/drop/trait.Drop.html\" title=\"trait core::ops::drop::Drop\">Drop</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.drop\" class=\"method trait-impl\"><a href=\"#method.drop\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/drop/trait.Drop.html#tymethod.drop\" class=\"fn\">drop</a>(&amp;mut self)</h4></section></summary><div class='docblock'>Executes the destructor for this type. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/drop/trait.Drop.html#tymethod.drop\">Read more</a></div></details></div></details>","Drop","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3C%26BitSlice%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;&amp;BitSlice&lt;T, O&gt;&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(slice: &amp;BitSlice&lt;T, O&gt;) -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<&BitSlice<T, O>>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitArray%3CA,+O%3E%3E-for-BitBox%3C%3CA+as+BitView%3E::Store,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CBitArray%3CA,+O%3E%3E-for-BitBox%3C%3CA+as+BitView%3E::Store,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitArray&lt;A, O&gt;&gt; for BitBox&lt;&lt;A as BitView&gt;::Store, O&gt;<div class=\"where\">where\n    A: BitViewSized,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(array: BitArray&lt;A, O&gt;) -&gt; BitBox&lt;&lt;A as BitView&gt;::Store, O&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitArray<A, O>>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBitVec%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CBitVec%3CT,+O%3E%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;BitVec&lt;T, O&gt;&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(bv: BitVec&lt;T, O&gt;) -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<BitVec<T, O>>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CBox%3CT%3E%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CBox%3CT%3E%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;T&gt;&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(elem: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;T&gt;) -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Box<T>>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CCow%3C'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-From%3CCow%3C'a,+BitSlice%3CT,+O%3E%3E%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, BitSlice&lt;T, O&gt;&gt;&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(cow: <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'a, BitSlice&lt;T, O&gt;&gt;) -&gt; BitBox&lt;T, O&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Cow<'a, BitSlice<T, O>>>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3CI%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-FromIterator%3CI%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, I&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;I&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    BitVec&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;I&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;II&gt;(iter: II) -&gt; BitBox&lt;T, O&gt;<div class=\"where\">where\n    II: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = I&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<I>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Hash-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.80.1/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3CIdx%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Index%3CIdx%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Idx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;BitSlice&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: Idx) -&gt; &amp;&lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<Idx>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IndexMut%3CIdx%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-IndexMut%3CIdx%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Idx&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;Idx&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    BitSlice&lt;T, O&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.IndexMut.html\" title=\"trait core::ops::index::IndexMut\">IndexMut</a>&lt;Idx&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.index_mut\" class=\"method trait-impl\"><a href=\"#method.index_mut\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.IndexMut.html#tymethod.index_mut\" class=\"fn\">index_mut</a>(&amp;mut self, index: Idx) -&gt; &amp;mut &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;Idx&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.Index.html#associatedtype.Output\" title=\"type core::ops::index::Index::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the mutable indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/index/trait.IndexMut.html#tymethod.index_mut\">Read more</a></div></details></div></details>","IndexMut<Idx>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-IntoIterator-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"docblock\"><p><a href=\"https://doc.rust-lang.org/1.80.1/alloc/vec/into_iter/struct.IntoIter.html\" title=\"struct alloc::vec::into_iter::IntoIter\">Original</a></p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = IntoIter&lt;T, O&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" title=\"type core::iter::traits::collect::IntoIterator::IntoIter\">IntoIter</a></h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.80.1/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-LowerHex-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    O: BitOrder,\n    T: BitStore,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.LowerHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","LowerHex","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Not-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = BitBox&lt;T, O&gt;</h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.Not.html\" title=\"trait core::ops::bit::Not\">Not</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.Not.html#associatedtype.Output\" title=\"type core::ops::bit::Not::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"https://doc.rust-lang.org/1.80.1/core/ops/bit/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details>","Not","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Octal-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    O: BitOrder,\n    T: BitStore,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Octal.html#tymethod.fmt\">Read more</a></div></details></div></details>","Octal","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Ord-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;BitBox&lt;T, O&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#856-858\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#877-879\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#903-906\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-PartialEq%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;Rhs&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    Rhs: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>&lt;BitSlice&lt;T, O&gt;&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq<Rhs>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-PartialOrd%3CRhs%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O, Rhs&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;Rhs&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,\n    Rhs: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>&lt;BitSlice&lt;T, O&gt;&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1180\">source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1198\">source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1215\">source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.1/src/core/cmp.rs.html#1233\">source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd<Rhs>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Pointer-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Pointer-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Pointer.html\" title=\"trait core::fmt::Pointer\">Pointer</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    O: BitOrder,\n    T: BitStore,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Pointer.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.Pointer.html#tymethod.fmt\">Read more</a></div></details></div></details>","Pointer","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-TryFrom%3CBox%3C%5BT%5D%3E%3E-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[T]</a>&gt;&gt; for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[T]</a>&gt;</h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(\n    boxed: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[T]</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;BitBox&lt;T, O&gt;, &lt;BitBox&lt;T, O&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.slice.html\">[T]</a>&gt;&gt;&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.80.1/core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Performs the conversion.</div></details></div></details>","TryFrom<Box<[T]>>","kff::utils::kmer::Seq2Bit"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-UpperHex-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    O: BitOrder,\n    T: BitStore,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.1/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.1/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.1/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.1/core/fmt/trait.UpperHex.html#tymethod.fmt\">Read more</a></div></details></div></details>","UpperHex","kff::utils::kmer::Seq2Bit"],["<section id=\"impl-Eq-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Eq-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section>","Eq","kff::utils::kmer::Seq2Bit"],["<section id=\"impl-Send-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Send-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section>","Send","kff::utils::kmer::Seq2Bit"],["<section id=\"impl-Sync-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Sync-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section>","Sync","kff::utils::kmer::Seq2Bit"],["<section id=\"impl-Unpin-for-BitBox%3CT,+O%3E\" class=\"impl\"><a href=\"#impl-Unpin-for-BitBox%3CT,+O%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, O&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.1/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a> for BitBox&lt;T, O&gt;<div class=\"where\">where\n    T: BitStore,\n    O: BitOrder,</div></h3></section>","Unpin","kff::utils::kmer::Seq2Bit"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()