var searchIndex = JSON.parse('{\
"kff":{"doc":"Kmer File Format Rust parser and writer","t":[2,2,0,0,0,0,0,13,4,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,2,2,2,2,2,0,0,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,6,10,11,10,11,10,11,10,11,10,11,2,2,2,2,2,2,0,0,0,0,3,11,11,11,11,11,11,11,11,11,11,6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,10,11,11,10,10,11,11,11,11,8,11,11,10,11,11,11,11,11],"n":["Kff","KmerIterator","error","iterator","kff","section","utils","BadEncoding","Error","FieldIsMissing","FooterSizeNotCorrect","FromUtf8","HighMajorVersionNumber","HighMinorVersionNumber","Io","Kff","Kff","MaxValueIsTooLarge","MissingMagic","NoFirstIndex","NoIndex","NoValueSectionBeforeTarget","NotAKmerSection","NotASectionPrefix","NotAnIndex","Result","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","0","0","0","0","0","0","0","KmerIterator","borrow","borrow_mut","from","into","into_iter","new","next","try_from","try_into","type_id","Kff","borrow","borrow_mut","check","create","finalize","from","header","header_mut","index","inner","into","kmer_of_section","kmers","next_kmer_section","open","read","seek","set_header","set_values","try_from","try_into","type_id","values","values_mut","with_index","write","write_index","write_minimizer","write_raw","write_values","Block","Header","Index","Minimizer","Raw","Values","block","header","index","minimizer","raw","values","Block","borrow","borrow_mut","data_size","default","fmt","from","into","into_iter","k","kmer","minimizer_offset","new","next","next_kmer","read_minimizer","read_raw","try_from","try_into","type_id","write_minimizer","write_raw","Header","borrow","borrow_mut","canonical_kmer","canonical_kmer_mut","encoding","fmt","free_block","free_block_mut","from","into","major_version","minor_version","new","read","set_canonical_kmer","set_encoding","set_free_block","set_major_version","set_minor_version","set_uniq_kmer","try_from","try_into","type_id","uniq_kmer","uniq_kmer_mut","write","Index","borrow","borrow_mut","default","fmt","from","into","new","next_index","next_index_mut","pair","pair_mut","read","set_next_index","set_pair","skip","try_from","try_into","type_id","write","Minimizer","borrow","borrow_mut","data_size","data_size_mut","default","from","into","k","k_mut","m","m_mut","max","max_mut","new","ordered","ordered_mut","read","set_data_size","set_k","set_m","set_max","set_ordered","try_from","try_into","type_id","write","Raw","borrow","borrow_mut","data_size","data_size_mut","default","from","into","k","k_mut","max","max_mut","new","ordered","ordered_mut","read","set_data_size","set_k","set_max","set_ordered","try_from","try_into","type_id","write","AbcValues","Values","new","new","read","read","with_capacity","with_capacity","write","write","write_as_footer","write_as_footer","Data","GlobalIndex","KffRead","KffWrite","Kmer","Seq2Bit","global_index","kmer","read","write","GlobalIndex","borrow","borrow_mut","default","from","into","new","pair","try_from","try_into","type_id","Data","Kmer","Seq2Bit","borrow","borrow_mut","data","data_mut","default","eq","fmt","from","from_ascii","into","ne","new","seq","seq2bit","seq2bit_mut","set_data","set_seq2bit","try_from","try_into","type_id","KffRead","read_2bits","read_ascii","read_bool","read_i64","read_n_bytes","read_n_bytes_dyn","read_u16","read_u32","read_u64","read_u8","KffWrite","write_ascii","write_bool","write_bytes","write_i64","write_u16","write_u32","write_u64","write_u8"],"q":["kff","","","","","","","kff::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kff::error::Error","","","kff::error::Kff","","","","","","","kff::iterator","","","","","","","","","","","kff::kff","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","kff::section","","","","","","","","","","","","kff::section::block","","","","","","","","","","","","","","","","","","","","","","kff::section::header","","","","","","","","","","","","","","","","","","","","","","","","","","","kff::section::index","","","","","","","","","","","","","","","","","","","","kff::section::minimizer","","","","","","","","","","","","","","","","","","","","","","","","","","","kff::section::raw","","","","","","","","","","","","","","","","","","","","","","","","kff::section::values","","","","","","","","","","","","kff::utils","","","","","","","","","","kff::utils::global_index","","","","","","","","","","","kff::utils::kmer","","","","","","","","","","","","","","","","","","","","","","","kff::utils::read","","","","","","","","","","","kff::utils::write","","","","","","","",""],"d":["","","Error struct of project kff","An iterator over all kmer present in a Kff file","Kmer File Format Rust parser","Struct and function to manage section","Utils function for KFF","Encoding isn’t valid each pair of bits must be different","Enum to manage error","Value with name ‘name’ isn’t present in Values this …","Footer size isn’t correct or file not respect footer …","Standard from Utf8 error","Major version number is upper than support","Minor version number is upper than support","Standard io error","Kff specific error","Kff error","Value max seems to be too large","Missing magic number at begin or end","No ‘first_index’ in footer","No global index","No Value section before target section","Not a kmer section","Not a valid Kff section prefix","Not an index","Alias of result","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","A Kmer Iterator that consume Kff file","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Build a KmerIterator with a Kff object","","","","","Struct to read a kff file","","","Check readable match with a KFF file","Intialize a Kff object to write file","Finalize write the final signature","Returns the argument unchanged.","Header extract from <code>inner</code>","Header extract from <code>inner</code>","GlobalIndex present only if inner is seekable and first …","Inner read source","Calls <code>U::from(self)</code>.","Get kmer of nth section in index.","Consume Kff object to create a KmerIterator","Read Kff until last kmer section","Create a new Kff by read file match with path","Create a new Kff reader by accept mutable reference on …","","Header extract from <code>inner</code>","Current Values extract from <code>inner</code>","","","","Current Values extract from <code>inner</code>","Current Values extract from <code>inner</code>","Create a Kff and generate a global index","Create a Kff object to write in inner","Write a Index section","Write a Minimizer section","Write a Raw section","Write a Values section","","","","","","","Representation of a KFF kmer block","Parse, manage and write Header information","Representation of a KFF index","Read and Write Minimizer section","Read and Write Raw section","Parse, manage and write Values section","Struct to data present in KFF Raw or Minimizer block","","","Size of data associate (in bytes) to each kmer","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Size of kmer","Bit field store all kmer of this block","Minimizer offset","Create a new block","","Get the next kmer of the block","Read minimizer block","Read raw block","","","","Write minimizer block","Write raw block","Struct to parse, manage and write Header information","","","This file contains only canonical kmer","This file contains only canonical kmer","Encoding schema","","Comment link to this file","Comment link to this file","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Major version number","Minor version number","Constructor of header","Read a readable to create a new header","This file contains only canonical kmer","Set encoding","Comment link to this file","Set major version","Set minor version","This file contains only uniq kmer","","","","This file contains only uniq kmer","This file contains only uniq kmer","Write this Header in KFF format","Struct to Read and Write Index section","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create an index","Position of the next index","Position of the next index","Vector of block type and relative position","Vector of block type and relative position","Read an Index section, section flag must be already read","Position of the next index","Vector of block type and relative position","Skip index section","","","","Write an Index section, section flag isn’t write","Struct to Read and Write Raw section","","","Size in bytes of data associate to each kmer","Size in bytes of data associate to each kmer","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Size of kmer","Size of kmer","Size of minimizer","Size of minimizer","Max number of kmer per block","Max number of kmer per block","Intialize a minimizer section with Values","Kmer are sort by lexicographic order","Kmer are sort by lexicographic order","Read a Minimizer section, section flag must be already read","Size in bytes of data associate to each kmer","Size of kmer","Size of minimizer","Max number of kmer per block","Kmer are sort by lexicographic order","","","","Write a Raw section, section flag isn’t read","Struct to Read and Write Raw section","","","Size in bytes of data associate to each kmer","Size in bytes of data associate to each kmer","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Size of kmer","Size of kmer","Max number of kmer per block","Max number of kmer per block","Intialize a raw section with Values","Kmer are sort by lexicographic order","Kmer are sort by lexicographic order","Read a Raw section, section flag must be already read","Size in bytes of data associate to each kmer","Size of kmer","Max number of kmer per block","Kmer are sort by lexicographic order","","","","Write a Raw section, section flag isn’t write","A trait to implement some function around Values alias","Struct to parse, manage and write Values section","Build an empty Values","","Build a Values from a readable key are overwrite, section …","","Build an empty Values but with a minimal capacity","","Write contents of Values in writables, section flag isn’…","","Write contents of Values in a writables as a footer","","","","","","","","Build a global index of a kff file","Representation of a KFF kmer block","Utils function to read KFF","Utils function to write KFF","Struct that manage and build a global index of a Kff file","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a GlobalIndex by scan all index in file","Pair of section type and position from begin of file","","","","Represent data associate to a kmer","Represent a Kmer with data","Represent a sequence in 2 bit","","","Data associate to kmer","Data associate to kmer","","","","Returns the argument unchanged.","Create a Kmer for ascii sequence","Calls <code>U::from(self)</code>.","","Create a new kmer","Get seq in ascii","2 bit field for sequenc","2 bit field for sequenc","Data associate to kmer","2 bit field for sequenc","","","","Define trait containts utils function to parsing kff","Function some base in 2bits representation","Function read a Kff ‘ascii’","Function that read one bit and convert it as bool","Function that read i64","Function read N bytes (N define at compile time) in a …","Function read N bytes (N define at run time) in a readable","Function that read u16","Function that read u32","Function that read u64","Function that read u8","Define trait containts utils function to write kff","Function that write bytes plus a ‘\\\\0’ at end","Function that write one bit and convert it as bool","Function that write all bytes","Function that write i64","Function that write u16","Function that write u32","Function that write u64","Function that write u8"],"i":[0,0,0,0,0,0,0,1,0,1,1,2,1,1,2,0,2,1,1,1,1,1,1,1,1,0,2,1,2,1,2,2,1,1,2,2,2,2,1,2,1,2,2,1,2,1,2,1,2,1,3,4,5,6,7,8,9,10,11,12,0,13,13,13,13,13,13,13,13,13,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,0,0,20,21,20,21,20,21,20,21,20,21,0,0,0,0,0,0,0,0,0,0,0,22,22,22,22,22,22,22,22,22,22,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,0,25,25,25,25,25,25,25,25],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["error",4],["formatter",3]],["result",6]],[[["error",4],["formatter",3]],["result",6]],[[["kff",4],["formatter",3]],["result",6]],[[["kff",4],["formatter",3]],["result",6]],[[["error",3]],["error",4]],[[]],[[["kff",4]],["error",4]],[[["fromutf8error",3]],["error",4]],[[]],[[]],[[]],[[["error",4]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[]],[[["kff",3]],["kmeriterator",3]],[[["kmeriterator",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["kff",3]],["result",6,[["bool",0]]]],[[["header",3]],["result",6,[["kff",3,[["bufwriter",3,[["file",3]]]]]]]],[[["kff",3]],["result",6]],[[]],[[["kff",3]],["header",3]],[[["kff",3]],["header",3]],[[["kff",3]],["option",4]],[[["kff",3]],["",0]],[[]],[[["kff",3],["usize",0]],["result",6,[["vec",3,[["kmer",3]]]]]],[[["kff",3]],["kmeriterator",3]],[[["kff",3]],["option",4,[["result",6,[["vec",3,[["kmer",3]]]]]]]],[[],["result",6,[["kff",3,[["bufreader",3,[["file",3]]]]]]]],[[],["result",6,[["kff",3]]]],[[["kff",3],["seekfrom",4]],["result",6,[["u64",0]]]],[[["kff",3],["header",3]],["kff",3]],[[["kff",3],["values",6]],["kff",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["kff",3]],["values",6]],[[["kff",3]],["values",6]],[[],["result",6,[["kff",3,[["bufreader",3,[["file",3]]]]]]]],[[["header",3]],["result",6,[["kff",3]]]],[[["kff",3],["index",3]],["result",6]],[[["kff",3],["minimizer",3],["seq2bit",6],["vec",3,[["block",3]]]],["result",6]],[[["kff",3],["raw",3],["vec",3,[["block",3]]]],["result",6]],[[["kff",3],["values",6]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["block",3]],["usize",0]],[[],["block",3]],[[["block",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[["block",3]],["u64",0]],[[["block",3]],["kmer",3]],[[["block",3]],["usize",0]],[[["u64",0],["usize",0],["kmer",3],["usize",0]],["block",3]],[[["block",3]],["option",4]],[[["block",3]],["option",4,[["kmer",3]]]],[[["",0],["u64",0],["u64",0],["usize",0],["u64",0],["seq2bit",6]],["result",6,[["block",3]]]],[[["",0],["u64",0],["usize",0],["u64",0]],["result",6,[["block",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["block",3],["",0],["usize",0],["u64",0]],["result",6]],[[["block",3],["",0],["u64",0]],["result",6]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["header",3]],["bool",0]],[[["header",3]],["bool",0]],[[["header",3]],["u8",0]],[[["header",3],["formatter",3]],["result",6]],[[["header",3]],["vec",3]],[[["header",3]],["vec",3]],[[]],[[]],[[["header",3]],["u8",0]],[[["header",3]],["u8",0]],[[["u8",0],["u8",0],["u8",0],["bool",0],["bool",0],["vec",3,[["u8",0]]]],["result",6,[["header",3]]]],[[["",0]],["result",6,[["header",3]]]],[[["header",3],["bool",0]],["header",3]],[[["header",3],["u8",0]],["result",6,[["header",3]]]],[[["header",3],["vec",3,[["u8",0]]]],["header",3]],[[["header",3],["u8",0]],["result",6,[["header",3]]]],[[["header",3],["u8",0]],["result",6,[["header",3]]]],[[["header",3],["bool",0]],["header",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["header",3]],["bool",0]],[[["header",3]],["bool",0]],[[["header",3],["",0]],["result",6]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["index",3]],[[["index",3],["formatter",3]],["result",6]],[[]],[[]],[[["vec",3],["u64",0]],["index",3]],[[["index",3]],["u64",0]],[[["index",3]],["u64",0]],[[["index",3]],["vec",3]],[[["index",3]],["vec",3]],[[["",0]],["result",6,[["index",3]]]],[[["index",3],["u64",0]],["index",3]],[[["index",3],["vec",3]],["index",3]],[[["",0]],["result",6,[["index",3]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["index",3],["",0]],["result",6]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["minimizer",3]],["u64",0]],[[["minimizer",3]],["u64",0]],[[],["minimizer",3]],[[]],[[]],[[["minimizer",3]],["u64",0]],[[["minimizer",3]],["u64",0]],[[["minimizer",3]],["u64",0]],[[["minimizer",3]],["u64",0]],[[["minimizer",3]],["u64",0]],[[["minimizer",3]],["u64",0]],[[["values",6]],["result",6,[["minimizer",3]]]],[[["minimizer",3]],["bool",0]],[[["minimizer",3]],["bool",0]],[[["minimizer",3],["",0]],["result",6,[["vec",3,[["kmer",3]]]]]],[[["minimizer",3],["u64",0]],["minimizer",3]],[[["minimizer",3],["u64",0]],["minimizer",3]],[[["minimizer",3],["u64",0]],["minimizer",3]],[[["minimizer",3],["u64",0]],["minimizer",3]],[[["minimizer",3],["bool",0]],["minimizer",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["minimizer",3],["",0],["seq2bit",6],["vec",3,[["block",3]]]],["result",6]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["raw",3]],["u64",0]],[[["raw",3]],["u64",0]],[[],["raw",3]],[[]],[[]],[[["raw",3]],["u64",0]],[[["raw",3]],["u64",0]],[[["raw",3]],["u64",0]],[[["raw",3]],["u64",0]],[[["values",6]],["result",6,[["raw",3]]]],[[["raw",3]],["bool",0]],[[["raw",3]],["bool",0]],[[["raw",3],["",0]],["result",6,[["vec",3,[["kmer",3]]]]]],[[["raw",3],["u64",0]],["raw",3]],[[["raw",3],["u64",0]],["raw",3]],[[["raw",3],["u64",0]],["raw",3]],[[["raw",3],["bool",0]],["raw",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["raw",3],["",0],["vec",3,[["block",3]]]],["result",6]],null,null,[[]],[[],["values",6]],[[["",0]],["result",6]],[[["",0]],["result",6,[["values",6]]]],[[["usize",0]]],[[["usize",0]],["values",6]],[[["",0],["",0]],["result",6]],[[["values",6],["",0]],["result",6]],[[["",0],["",0]],["result",6]],[[["values",6],["",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[],["globalindex",3]],[[]],[[]],[[["",0],["u64",0]],["result",6,[["globalindex",3]]]],[[["globalindex",3]],["vec",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["kmer",3]],["data",6]],[[["kmer",3]],["data",6]],[[],["kmer",3]],[[["kmer",3],["kmer",3]],["bool",0]],[[["kmer",3],["formatter",3]],["result",6]],[[]],[[["data",6],["u8",0]],["kmer",3]],[[]],[[["kmer",3],["kmer",3]],["bool",0]],[[["seq2bit",6],["data",6]],["kmer",3]],[[["kmer",3],["u8",0]],["vec",3,[["u8",0]]]],[[["kmer",3]],["seq2bit",6]],[[["kmer",3]],["seq2bit",6]],[[["kmer",3],["data",6]],["kmer",3]],[[["kmer",3],["seq2bit",6]],["kmer",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[["",0],["usize",0]],["result",6,[["bitvec",3,[["u8",0],["msb0",3]]]]]],[[["",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["bool",0]]]],[[["",0]],["result",6,[["i64",0]]]],[[["",0]],["result",6]],[[["",0],["usize",0]],["result",6,[["vec",3,[["u8",0]]]]]],[[["",0]],["result",6,[["u16",0]]]],[[["",0]],["result",6,[["u32",0]]]],[[["",0]],["result",6,[["u64",0]]]],[[["",0]],["result",6,[["u8",0]]]],null,[[["",0]],["result",6]],[[["",0],["bool",0]],["result",6]],[[["",0]],["result",6]],[[["",0],["i64",0]],["result",6]],[[["",0],["u16",0]],["result",6]],[[["",0],["u32",0]],["result",6]],[[["",0],["u64",0]],["result",6]],[[["",0],["u8",0]],["result",6]]],"p":[[4,"Kff"],[4,"Error"],[13,"Kff"],[13,"Io"],[13,"FromUtf8"],[13,"MissingMagic"],[13,"HighMajorVersionNumber"],[13,"HighMinorVersionNumber"],[13,"BadEncoding"],[13,"FieldIsMissing"],[13,"MaxValueIsTooLarge"],[13,"NotASectionPrefix"],[3,"KmerIterator"],[3,"Kff"],[3,"Block"],[3,"Header"],[3,"Index"],[3,"Minimizer"],[3,"Raw"],[8,"AbcValues"],[6,"Values"],[3,"GlobalIndex"],[3,"Kmer"],[8,"KffRead"],[8,"KffWrite"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
